{"version":3,"sources":["serviceWorker.js","Demo.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","map","name","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCDO,CAAC,QAAS,OAAQ,UAAW,QAAS,QAAS,SAASC,KACjE,SAACC,GAAD,oHAAiHA,EAAjH,WAUa,CAAC,WAAY,WAAY,cAAe,cAAe,eAAgB,cAAe,SAAU,OAAQ,OAAQ,sBAAuB,kBAAmB,mBAAoB,eAAgB,iBAAiBD,KAC5N,SAACC,GAAD,kFAA+EA,EAA/E,WCoFW,SAASC,KC9ExBC,IAASC,OAAO,kBAACF,EAAD,MAASG,SAASC,eAAe,SHgG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b71a7050.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//#region ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n\nimport * as THREE from 'three';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport React, { Suspense, useState, useEffect, useMemo } from 'react';\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\nimport { useTransition, useSpring, a } from '@react-spring/three';\n\n// import React, { Suspense } from 'react';\n// import { Canvas } from 'react-three-fiber';\n// import Demo from './Demo';\n\nimport './styles.css';\n\n// const colors = ['#21242d', '#ea5158', '#0d4663', '#ffbcb7', '#2d4a3e', '#8bd8d2'];\nconst colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#00ffff', '#ff00ff'];\n\nconst urls = ['night', 'city', 'morning', 'tubes', 'woods', 'beach'].map(\n    (name) => `https://raw.githubusercontent.com/drcmda/react-three-fiber/master/examples/src/resources/images/svg/${name}.svg`\n    // (name) => `./images/svg/${name}.svg`\n);\n\n\n\n\n// const logoUrl = './images/shigeru_logo_test.svg';\n\n// const logoUrls = ['shigeru_logo_test', 'shigeru_logo_transparent'].map(\nconst logoUrls = ['arrow_lf', 'arrow_rt', 'badge_flash', 'badge_html5', 'badge_mobile', 'badge_video', 'curl_k', 'curl', 'grid', 'shigeru_logo_ko_rev', 'shigeru_logo_ko', 'shigeru_logo_rev', 'shigeru_logo', 'thoughtBubble'].map(\n    (name) => `https://www.shigimcp.com/Xstage/shigimcp_2020_react/img/0elements/${name}.svg`\n    // (name) => `http://www.shigimcp.com/Xstage/shigimcp_2020_react/img/0elements/${name}.svg`\n    // (name) => 'http://www.shigimcp.com/Xstage/shigimcp_2020_react/img/0elements/${name}.svg'\n    // (name) => `/images/${name}.svg`\n);\n\n\n\n\nfunction Shape({ shape, rotation, position, color, opacity, index }) {\n\n    if (!position) return null\n\n    return (\n        <a.mesh rotation={rotation} position={position.to((x, y, z) => [x, y, z + index * 50])}>\n            <a.meshPhongMaterial attach=\"material\" color={color} opacity={opacity} side={THREE.DoubleSide} depthWrite={false} transparent />\n            <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n        </a.mesh>\n    )\n}\n\nfunction Scene() {\n    const { viewport } = useThree()\n\n    const [page, setPage] = useState(0)\n\n    useEffect(() => void setInterval(() => setPage((i) => (i + 1) % urls.length), 3500), [])\n\n    // const data = useLoader(SVGLoader, urls[page])\n    // const data = useLoader(SVGLoader, logoUrl)\n    const data = useLoader(SVGLoader, logoUrls[page])\n\n    const shapes = useMemo(() => data.paths.flatMap((g, index) => g.toShapes(true).map((shape) => ({ shape, color: g.color, index }))), [\n        data\n    ])\n\n    // // console.log('shapes = ' + shapes);\n    // console.log('shapes = ');\n    // console.log(shapes);\n\n    const [{ color }] = useSpring({ color: colors[page] }, [page])\n\n    const [transition] = useTransition(\n        shapes,\n        {\n            keys: (item) => item.shape.uuid,\n            from: { rotation: [0.0, -Math.PI / 4, 0], position: [0, 50, 200], opacity: 0 },\n            enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n            leave: { rotation: [0, 0.25, 0], position: [0, -50, 10], opacity: 0 },\n            trail: 5\n        },\n        [page]\n    )\n\n    return (\n        <>\n            <mesh scale={[viewport.width, viewport.height, 1]}>\n                <planeGeometry attach=\"geometry\" args={[1, 1]} />\n                <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} />\n            </mesh>\n            <group position={[viewport.width / 2, viewport.height / 4, page]} rotation={[0, 0, Math.PI]}>\n                {transition((props, item, t, i) => (\n                    <Shape {...item} {...props} />\n                ))}\n            </group>\n        </>\n    )\n}\n\n\n\nexport default function Demo() {\n\n    return (\n        <Canvas\n            camera={{\n                fov: 80,\n                position: [0, 0, 2000],\n                near: 0.1,\n                far: 20000\n            }}>\n            <ambientLight intensity={0.5} />\n            <spotLight intensity={0.5} position={[300, 300, 4000]} />\n            <Suspense fallback={null}>\n                <Scene />\n            </Suspense>\n        </Canvas>\n    )\n\n}\n\n//#endregion ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n","//#region ==================== create-react-app ====================\n\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//#endregion ==================== create-react-app ====================\n\n\n\n\n//#region ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n\n// import * as THREE from 'three';\n// import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\n// import React, { Suspense, useState, useEffect, useMemo } from 'react';\n// import { Canvas, useLoader, useThree } from 'react-three-fiber';\n// import { useTransition, useSpring, a } from '@react-spring/three';\n\n\nimport React from 'react';\nimport Demo from './Demo';\n\nimport './styles.css';\n\n// const colors = ['#21242d', '#ea5158', '#0d4663', '#ffbcb7', '#2d4a3e', '#8bd8d2'];\n\n// const urls = ['night', 'city', 'morning', 'tubes', 'woods', 'beach'].map(\n//     (name) => `https://raw.githubusercontent.com/drcmda/react-three-fiber/master/examples/src/resources/images/svg/${name}.svg`\n// );\n\n// // const urls = ['shigeru_logo_test', 'shigeru_logo_transparent'].map(\n// //     (name) => `./images/${name}.svg`\n// // );\n\n// function Shape({ shape, rotation, position, color, opacity, index }) {\n//     if (!position) return null\n//     return (\n//         <a.mesh rotation={rotation} position={position.to((x, y, z) => [x, y, z + index * 50])}>\n//             <a.meshPhongMaterial attach=\"material\" color={color} opacity={opacity} side={THREE.DoubleSide} depthWrite={false} transparent />\n//             <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n//         </a.mesh>\n//     )\n// }\n\n// function Scene() {\n//     const { viewport } = useThree()\n//     const [page, setPage] = useState(0)\n\n//     useEffect(() => void setInterval(() => setPage((i) => (i + 1) % urls.length), 3500), [])\n\n//     const data = useLoader(SVGLoader, urls[page])\n\n//     const shapes = useMemo(() => data.paths.flatMap((g, index) => g.toShapes(true).map((shape) => ({ shape, color: g.color, index }))), [\n//         data\n//     ])\n\n//     // console.log('shapes = ' + shapes);\n//     console.log('shapes = ');\n//     console.log(shapes);\n\n//     const [{ color }] = useSpring({ color: colors[page] }, [page])\n\n//     const [transition] = useTransition(\n//         shapes,\n//         {\n//             keys: (item) => item.shape.uuid,\n//             from: { rotation: [0.0, -Math.PI / 4, 0], position: [0, 50, 200], opacity: 0 },\n//             enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n//             leave: { rotation: [0, 0.25, 0], position: [0, -50, 10], opacity: 0 },\n//             trail: 5\n//         },\n//         [page]\n//     )\n\n//     return (\n//         <>\n//             <mesh scale={[viewport.width, viewport.height, 1]}>\n//                 <planeGeometry attach=\"geometry\" args={[1, 1]} />\n//                 <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} />\n//             </mesh>\n//             <group position={[viewport.width / 2, viewport.height / 4, page]} rotation={[0, 0, Math.PI]}>\n//                 {transition((props, item, t, i) => (\n//                     <Shape {...item} {...props} />\n//                 ))}\n//             </group>\n//         </>\n//     )\n// }\n\nexport default function App() {\n    return (\n\n        // <Canvas\n        //     camera={{\n        //         fov: 80,\n        //         position: [0, 0, 2000],\n        //         near: 0.1,\n        //         far: 20000\n        //     }}>\n        //     <ambientLight intensity={0.5} />\n        //     <spotLight intensity={0.5} position={[300, 300, 4000]} />\n        //     <Suspense fallback={null}>\n        //         <Scene />\n        //     </Suspense>\n        // </Canvas>\n\n        <Demo />\n    )\n}\n\n//#endregion ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n","//#region ==================== create-react-app ====================\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n//#endregion ==================== create-react-app ====================\n\n\n\n\n//#region ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n\n// Illustrations @ Tina Henschel: https://www.instagram.com/tina.henschel\n\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//#endregion ==================== REF: https://github.com/pmndrs/react-three-fiber, https://codesandbox.io/embed/wonderful-chandrasekhar-8l9rrj36j0 ====================\n"],"sourceRoot":""}